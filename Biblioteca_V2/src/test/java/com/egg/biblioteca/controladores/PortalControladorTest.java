package com.egg.biblioteca.controladores;


// Generated by CodiumAI

import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PortalControladorTest {


    // GET request to "/" returns "index.html"
    @Test
    public void test_get_index_returns_index_html() {
        PortalControlador portalControlador = new PortalControlador();
        String result = portalControlador.index();
        assertEquals("index.html", result);
    }

    // GET request to "/registrar" returns "registro.html"
    @Test
    @RepeatedTest(2)
    public void test_get_registrar_returns_registro_html() {
        PortalControlador portalControlador = new PortalControlador();
        String result = portalControlador.registrar();
        assertEquals("registro.html", result);
    }

    // POST request to "/registro" with valid parameters registers a new user and redirects to "/"
    @Test
    public void test_post_registro_with_valid_parameters_registers_new_user_and_redirects_to_index() {
        UsuarioServicio usuarioServicioMock = mock(UsuarioServicio.class);
        PortalControlador portalControlador = new PortalControlador();
        portalControlador.setUsuarioServicio(usuarioServicioMock);

        ModelMap modelo = new ModelMap();
        MultipartFile archivo = mock(MultipartFile.class);

        String nombre = "John";
        String email = "john@example.com";
        String password = "password";
        String password2 = "password";

        String result = portalControlador.registro(nombre, email, password, password2, modelo, archivo);

        verify(usuarioServicioMock).registrar(archivo, nombre, email, password, password2);
        assertEquals("index.html", result);
    }

    // POST request to "/registro" with invalid parameters returns "registro.html" with error message
    @Test
    public void test_post_registro_with_invalid_parameters_returns_registro_html_with_error_message() {
        UsuarioServicio usuarioServicioMock = mock(UsuarioServicio.class);
        PortalControlador portalControlador = new PortalControlador();
        portalControlador.setUsuarioServicio(usuarioServicioMock);

        ModelMap modelo = new ModelMap();
        MultipartFile archivo = mock(MultipartFile.class);

        String nombre = "";
        String email = "";
        String password = "";
        String password2 = "";

        String result = portalControlador.registro(nombre, email, password, password2, modelo, archivo);

        verify(usuarioServicioMock, never()).registrar(any(), any(), any(), any(), any());
        assertEquals("registro.html", result);
        assertNotNull(modelo.get("error"));
    }

    // GET request to "/login" with invalid credentials returns "login.html" with error message
    @Test
    public void test_get_login_with_invalid_credentials_returns_login_html_with_error_message() {
        PortalControlador portalControlador = new PortalControlador();

        ModelMap modelo = new ModelMap();

        String error = "Invalid credentials";

        String result = portalControlador.login(error, modelo);

        assertEquals("login.html", result);
        assertNotNull(modelo.get("error"));
    }

    // GET request to "/inicio" with an unauthenticated user redirects to "/login"
    @Test
    public void test_get_inicio_with_unauthenticated_user_redirects_to_login() {
        PortalControlador portalControlador = new PortalControlador();

        HttpSession session = mock(HttpSession.class);

        String result = portalControlador.inicio(session);

        assertEquals("redirect:/login", result);
    }

}